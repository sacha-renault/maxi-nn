import litgen
import litgen.options
import tempfile
import copy

# Here i manually add files i want to make an python API with
files = [
    ("include/MaxiNn/Tensor.hpp", "nn/tensor.pyi"),
    ("include/MaxiNn/LayerFcc.hpp", "nn/layers.pyi"),
    ("include/MaxiNn/TensorwiseMath.hpp", "nn/math.pyi"),
    ("include/MaxiNn/ElementwiseMath.hpp", "nn/math.pyi"),
    ("include/MaxiNn/Loss.hpp", "nn/loss.pyi")
]

spec = ["float"]

if __name__ == "__main__":
    options = litgen.options.LitgenOptions()

    options.fn_template_options.add_specialization("tanh", spec, False)
    options.fn_template_options.add_specialization("clip", spec, False)
    options.fn_template_options.add_specialization("sqrt", spec, False)
    options.fn_template_options.add_specialization("pow", spec, False)
    options.fn_template_options.add_specialization("log", spec, False)
    options.fn_template_options.add_specialization("exp", spec, False)
    options.fn_template_options.add_specialization("abs", spec, False)
    options.fn_template_options.add_specialization("relu", spec, False)
    options.fn_template_options.add_specialization("meanAbsoluteError", spec, False)
    options.fn_template_options.add_specialization("categoricalCrossEntropy", spec, False)
    options.fn_template_options.add_specialization("meanSquaredError", spec, False)
    options.fn_template_options.add_specialization("dot", spec, False)
    options.fn_template_options.add_specialization("reduceMean", spec, False)
    options.fn_template_options.add_specialization("softmax", spec, False)
    options.fn_template_options.add_specialization("reduceSum", spec, False)

    options.class_template_options.add_specialization("Tensor", spec)
    options.class_template_options.add_specialization("Fcc", spec)
    options.class_template_options.add_specialization("ComputationGraph", spec)
    generator_pydef = litgen.LitgenGenerator(options) # pydef generator is global

    stub_option = copy.deepcopy(options)
    stub_option.namespaces_root = ["nn::tensor", "nn::layers", "nn::math", "nn::loss"]

    generator_stub = litgen.LitgenGenerator(stub_option) # is local
    generator_pydef.process_cpp_file("include/MaxiNn/Graph.hpp")

    for c_file, stub_path in files:
        generator_stub = litgen.LitgenGenerator(stub_option) # is local
        generator_pydef.process_cpp_file(c_file)
        generator_stub.process_cpp_file(c_file)

        generator_stub.write_generated_code(
            "binding.cpp",
            stub_path
        )
            
    with tempfile.NamedTemporaryFile("w") as file:
        file.write("""
# type: ignore
import sys
from typing import Literal, List, Any, Optional, Tuple, Dict
import numpy as np
import enum
import numpy

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <litgen_stub> // Autogenerated code below! Do not edit!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# </litgen_stub> // Autogenerated code end!
""")
        file.flush()
        generator_pydef.write_generated_code(
                "binding.cpp",
                file.name
            )
